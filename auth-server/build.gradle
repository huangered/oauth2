dependencyManagement {
	imports {
		mavenBom 'org.springframework.cloud:spring-cloud-dependencies:Hoxton.SR8'
	}
}
configurations.runtimeOnly.canBeResolved(true)


dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
	implementation 'org.springframework.boot:spring-boot-starter-aop'
	implementation 'org.springframework.boot:spring-boot-starter-oauth2-resource-server'
	implementation 'org.springframework.cloud:spring-cloud-starter-oauth2'
	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation('org.springframework.boot:spring-boot-starter-test') {
		exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
	}
	testImplementation 'org.springframework.security:spring-security-test'

	runtime("org.postgresql:postgresql")

	api project(':swagger2')
	implementation('org.flywaydb:flyway-core')

	// aspectj wearer
	runtimeOnly "org.aspectj:aspectjweaver:1.9.6"
	runtimeOnly "org.springframework:spring-instrument"
}

//跑 test 必须要加下以下语句
test {
	def aspectjweaver = classpath.find { it.name.contains("aspectjweaver") }.absolutePath
	def spring_instrument = classpath.find { it.name.contains("spring-instrument") }.absolutePath
	jvmArgs = [ "-javaagent:${spring_instrument}",
			    "-javaagent:${aspectjweaver}"
	]
}
//跑 bootRun 必须要加下以下语句
bootRun {
	def aspectjweaver = classpath.find { it.name.contains("aspectjweaver") }.absolutePath
	def spring_instrument = classpath.find { it.name.contains("spring-instrument") }.absolutePath
	jvmArgs = [ "-javaagent:${spring_instrument}",
				"-javaagent:${aspectjweaver}"
	]
}

// 复制 agent jar 包到 libs 目录
task copyagentjar {
	dependsOn 'build'
	def dest = buildDir.absolutePath + "\\libs"
	println(dest)
	def aspectjweaver = configurations.runtimeOnly.resolve().find { it.name.contains("aspectjweaver") }.absolutePath
	def spring_instrument = configurations.runtimeOnly.resolve().find { it.name.contains("spring-instrument") }.absolutePath
	copy {
		from aspectjweaver
		into dest
	}
	copy {
		from spring_instrument
		into dest
	}
}